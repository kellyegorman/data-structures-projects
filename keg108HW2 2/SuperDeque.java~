public class SuperDeque<E> {
  
  private int front;
  
  private int back;
  
  private E[] dq;
  
  private static final int DEFAULT_CAP = 1;
  
  public SuperDeque() {
    this.dq = (E[]) new Object[DEFAULT_CAP];
    this.front = 0;
    this.back = 0;
  }
  
  public int getFront() {
    return this.front;
  }
  
  public int getBack() {
    return this.back;
  }
  
  public int getLength() {
    return dq.length;
  }
  
  public boolean isFull() {
    return ((this.getBack() + 1) % dq.length) == this.getFront();
  }
  
  public void push(E element) {
    if (isFull()) {
      doubleSize();
    }
    else {
      dq[back] = element;
      back = (back + 1)%dq.length;
    }
  }
  
  public E pop() {
    if(isEmpty()) {
      return null;
    }
    else {
      E save = dq[back -1];
      dq[back] = null;
      back = (back - 1 + dq.length)%dq.length;
      return save;
    }
  }
  
  public E peek() {
    if(isEmpty()) {
      return null;
    }
    else {
      return dq[(back - 1 + dq.length) % dq.length];
    }
  }
  
  public void enqueue(E element) {
    if (isFull()) {
      this.doubleSize();
    }
    else {
      dq[back] = element;
      back = (back + 1)%dq.length;
    }
  }
  
  public E dequeue() {
    if(isEmpty()) {
      return null;
    }
    else {
      E save = dq[front];
      dq[front] = null;
      front = (front + 1)%dq.length;
      return save;
    }
  }
  
  public boolean isEmpty() {
    return this.getFront() == this.getBack();
  }
  
  public void doubleSize() {
    int currentLength = dq.length;
    int newLength = currentLength * 2;
    E[] newQueue = (E[]) new Object[newLength];
    for(int i = front; i < back; i++) {
      newQueue[i] = dq[i];
      front = (front + 1)%currentLength;
    }
    dq = newQueue;
    front = 0;
    back = currentLength - 1;
  }
  
  public String toString() {
    StringBuilder sb = new StringBuilder();
    int i = front;
    while (i < (back - 1)) {
      sb.append(dq[i]);
      sb.append(", ");
      i++;
    }
    sb.append(dq[back - 1]);
    return sb.toString();
  }
  
}